export type WordMap = number

const letterToMapMap = new Map<string, WordMap>([
  ['a', 0b00000000000000000000000001],
  ['b', 0b00000000000000000000000010],
  ['c', 0b00000000000000000000000100],
  ['d', 0b00000000000000000000001000],
  ['e', 0b00000000000000000000010000],
  ['f', 0b00000000000000000000100000],
  ['g', 0b00000000000000000001000000],
  ['h', 0b00000000000000000010000000],
  ['i', 0b00000000000000000100000000],
  ['j', 0b00000000000000001000000000],
  ['k', 0b00000000000000010000000000],
  ['l', 0b00000000000000100000000000],
  ['m', 0b00000000000001000000000000],
  ['n', 0b00000000000010000000000000],
  ['o', 0b00000000000100000000000000],
  ['p', 0b00000000001000000000000000],
  ['q', 0b00000000010000000000000000],
  ['r', 0b00000000100000000000000000],
  ['s', 0b00000001000000000000000000],
  ['t', 0b00000010000000000000000000],
  ['u', 0b00000100000000000000000000],
  ['v', 0b00001000000000000000000000],
  ['w', 0b00010000000000000000000000],
  ['x', 0b00100000000000000000000000],
  ['y', 0b01000000000000000000000000],
  ['z', 0b10000000000000000000000000],
])

export const getMapFromWord = (word: string) => {
  return word.split('').reduce(
    (acc, letter) => acc | (letterToMapMap.get(letter) ?? 0)
    , 0
  )
}

const vowelMap = getMapFromWord('aeiouy')

export const wordHasVowel = (word: string) => (getMapFromWord(word) & vowelMap) !== 0

export const getNumberOfOnesInMap = (number: WordMap) => number.toString(2).replace(/0/g, '').length

export const mapToString = (number: WordMap) => number.toString(2).padStart(26, '0')
